<?php

// Hooks

/**
 * Implements hook_hook_info().
 */
function sanity_hook_info() {
  $hooks['sanity'] = [
    'group' => 'sanity',
  ];

  return $hooks;
}

/**
 * Implements hook_menu().
 */
function sanity_menu() {
  $items = [];

  $items['admin/reports/sanity/settings'] = [
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['sanity_settings_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_LOCAL_TASK,
  ];

  $items['admin/reports/sanity'] = [
    'title' => t('Sanity Check Report'),
    'page callback' => 'sanity_check_page',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => ['access site reports'],
  ];

  $items['admin/reports/sanity/view'] = [
    'title' => t('Report'),
    'page callback' => 'sanity_check_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => ['access site reports'],
  ];

  $sanity = sanity_get_checks(TRUE);
  $groups = array_unique(array_filter(array_column($sanity, 'group')));

  $default = FALSE;
  foreach ($groups as $g) {
    $default = TRUE;
    $items['admin/reports/sanity/view/' . strtolower($g)] = [
      'title' => $g,
      'page callback' => 'sanity_check_page',
      'page arguments' => array($g),
      'access arguments' => ['access site reports'],
      'type' => MENU_LOCAL_TASK,
    ];
  }
  if ($default) {
    $items['admin/reports/sanity/view/all'] = [
      'title' => t('All'),
      'page callback' => 'sanity_check_page',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access arguments' => ['access site reports'],
    ];
  }

  return $items;
}

/**
 * Title callback for sanity subpages.
 */
function sanity_group_title($group) {
  return "Sanity Report: $group";
}

/**
 * Implements hook_requirements().
 */
function sanity_requirements($phase) {
  if ($phase == 'runtime') {
    $sanity = sanity_check();
    $fails = array_unique(
      array_map(function($r) { return $r->skey; }, $sanity)
    );


    if (!empty($sanity)) {
      $reqs['sanity_check'] = [
        'title' => t('Sanity Check'),
        'value' => t('Sanity check failed!'),
        'description' => t('The following sanity checks on your site have failed: ') . implode(', ', $fails),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    else {
      $reqs['sanity_check'] = [
        'title' => t('Sanity Check'),
        'value' => t('Sanity check passed!'),
        'description' => t('All sanity checks defined for your site have passed.'),
        'severity' => REQUIREMENT_OK,
      ];
    }

    return $reqs;
  }
}

/**
 * Implements hook_cron().
 */
function sanity_cron() {
  // If sanity-on-cron is enabled, then we run a normal check (NULL) where the
  // timer decides whether to refresh or not. If sanity-on-cron is disabled, we
  // only get current results, not refreshing even if the sanity cache is stale.
  $refresh = variable_get('sanity_cron', FALSE) ? NULL : FALSE;
  $sanity = sanity_check($refresh);
  if (variable_get('sanity_email_warnings', FALSE)) {
    sanity_email_warning($sanity);
  }
}

/**
 * Implements hook_views_api().
 */
function sanity_views_api() {
  return [
    'api' => '3',
    'path' => drupal_get_path('module', 'sanity') . "/views",
  ];
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function sanity_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($router_item['tab_root'] == 'admin/reports/sanity' && !empty($data['tabs'][1]['count'])) {
    foreach ($data['tabs'][1]['output'] as &$tab) {
      $args = unserialize($tab['#link']['page_arguments']);
      $arg = reset($args);
      if ($arg == 'all') {
        $num = count(sanity_current_report());
      }
      else {
        $num = count(sanity_current_report($arg));
      }
      $tab['#link']['title'] .= " ($num)";
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function sanity_cron_queue_info() {
  if (variable_get('sanity_advancedqueue', module_exists('advancedqueue'))) {
    return;
  }

  $items = [];
  $items['sanity_check_reports'] = [
    'worker callback' => 'sanity_check_queue_callback',
    'time' => 60,
  ];

  return $items;
}

/**
 * Implements hook_advancedqueue_info().
 */
function sanity_advanced_queue_info() {
  $items = [];

  $items['sanity_check_reports'] = [
    'label' => 'Sanity check reports',
    'worker callback' => 'sanity_check_advancedqueue_callback',
  ];

  return $items;
}

// Logic

/**
 * Get sanity check results.
 */
function sanity_check($refresh = NULL, $group = NULL) {
  // By default, this function tries to refresh only if the timer is expired or
  // the sanity check has never been run. A refresh can be forced by setting
  // $refresh to TRUE and a refresh can be skipped (even if there is no data) by
  // setting $refresh to FALSE.
  $last = variable_get('sanity_last_refreshed', 0);
  $expire = $last + variable_get('sanity_refresh_timer', 86400);

  if (!$refresh && REQUEST_TIME < $expire) {
    return sanity_current_report($group);
  }
  elseif ($refresh !== FALSE) {
    sanity_refresh();
    return sanity_current_report($group);
  }
  else {
    return sanity_current_report($group);
  }
}

/**
 * Get current sanity report table results.
 */
function sanity_current_report($group = NULL) {
  $query = db_select('sanity_report', 's')
    ->fields('s')
    ->orderBy('s.sgroup', 'ASC')
    ->orderBy('s.skey', 'ASC')
    ->orderBy('s.type', 'ASC');
  if ($group) {
    $query->condition('sgroup', $group);
  }

  $results = $query->execute();

  return $results->fetchAll();
}

/**
 * Get defined sanity checks.
 */
function sanity_get_checks($flatten = FALSE) {
  $last_refreshed = variable_get('sanity_last_refreshed', 0);
  foreach (module_implements('sanity') as $module) {
    $checks = module_invoke($module, 'sanity', $last_refreshed);
    foreach ($checks as &$check) {
      $check += [
        'query' => FALSE,
        'fetch_cb' => '',
        'params' => [],
        'results_cb' => '',
        'uses_keys' => FALSE,
        'group' => NULL,
      ];
    }
    $sanity[$module] = $checks;
  }

  drupal_alter('sanity', $sanity);

  if ($flatten) {
    $sanity = array_merge(...array_values($sanity));
  }

  return $sanity;
}

/**
 * Refresh sanity check.
 */
function sanity_refresh() {
  $sanity = sanity_get_checks();

  $queue = DrupalQueue::get('sanity_check_reports');

  foreach ($sanity as $module => $checks) {
    foreach ($checks as $key => $check) {
      $data = [
        'check' => $check,
        'key' => $key,
        'module' => $module,
      ];

      $queue->createItem($data);

    }
  }

  variable_set('sanity_last_refreshed', REQUEST_TIME);
}

/**
 * Sanity check queue callback. Processes a single sanity check.
 */
function sanity_check_queue_callback($data) {
  $now = time();
  $check = $data['check'];
  $key = $data['key'];
  $module = $data['module'];
  module_load_include('inc', $module, "$module.sanity");

  if ($check['query']) {
    $stmt = db_query($check['query'], $check['params']);
    $queried = $stmt->fetchAll();
    $results = ($check['fetch_cb'] ? array_map($check['fetch_cb'], $queried) : $queried);
  }
  else {
    if (function_exists($check['results_cb'])) {
      $results = call_user_func_array($check['results_cb'], $check['params']);
    }
    else {
      $results = [];
    }
  }

  // Wrap these writes in a transaction for a little speed gain.
  $txn = db_transaction();
  try {  
    if (!empty($results)) {
      foreach ($results as $r) {
        $r->created = $now;
        $r->sgroup = $check['group'];
        $r->skey = $key;

        drupal_write_record('sanity_report', $r);
      }
    }
    db_delete('sanity_report')
      ->condition('created', $now, '<')
      ->condition('skey', $key)
      ->execute();
  }
  catch (Exception $e) {
    // Something went wrong. Leave the existing sanity records and fail the job.
    // @TODO: Add better logging here.
    $txn->rollBack();
    throw $e;
  }
  // Yay. Success.
  unset($txn);

  return TRUE;
}

/**
 * Sanity check AQ callback. Wraps the main queue worker.
 */
function sanity_check_advancedqueue_callback($item) {
  $status = sanity_check_queue_callback($item->data);

  return [
    'status' => $status,
    'result' => "Sanity check report completed for: " . $item->data['key'],
  ];
}

// Pages

/**
 * Sanity settings page.
 */
function sanity_settings_form($form, &$form_state) {
  $form['#title'] = t('Sanity Settings Form');

  $form['sanity_refresh_timer'] = [
    '#type' => 'textfield',
    '#default_value' => variable_get('sanity_refresh_timer', 86400),
    '#title' => t('Sanity check refresh timer'),
    '#description' => t('The time in seconds before sanity check results will be automatically refreshed.'),
  ];

  $form['sanity_cron'] = [
    '#type' => 'checkbox',
    '#default_value' => variable_get('sanity_cron', FALSE),
    '#title' => t('Sanity check cron'),
    '#description' => t('If enabled, the Sanity module will run a sanity check during every site cron run. Keep this in mind if you have a low sanity refresh rate, frequent crons, and expensive sanity checks.'),
  ];

  $form['sanity_advancedqueue'] = [
    '#type' => 'checkbox',
    '#default_value' => variable_get('sanity_advancedqueue', module_exists('advancedqueue')),
    '#title' => t('Sanity check via AQ'),
    '#description' => t('If enabled, Sanity refreshes will process via AdvancedQueue rather than normal cron runs.'),
  ];

  $form['sanity_email_warnings'] = [
    '#type' => 'checkbox',
    '#default_value' => variable_get('sanity_email_warnings', FALSE),
    '#title' => t('Sanity e-mail warning'),
    '#description' => t('Send an e-mail warning to the site administrator and others when sanity checks are failing.'),
  ];

  $form['sanity_additional_emails'] = [
    '#type' => 'textarea',
    '#default_value' => variable_get('sanity_additional_emails', []),
    '#value_callback' => 'sanity_additional_emails_value',
    '#element_validate' => ['sanity_additional_emails_validate'],
    '#title' => t('Additional warning targets'),
    '#description' => t('Send the sanity check e-mail warning to the following targets in addition to the site administrator.'),
  ];

  return system_settings_form($form);
}

function sanity_additional_emails_value($element, $input = FALSE, &$form_state) {
  if ($input === FALSE) {
    return implode("\n", $element['#default_value']);
  }
  else {
    return $element['#value'];
  }
}

function sanity_additional_emails_validate($element, &$form_state) {
  if (!empty($element['#value'])) {
    $value = explode("\n", str_replace("\r", "", $element['#value']));
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Sanity check report page.
 */
function sanity_check_page($group = NULL) {
  $sanity = sanity_check(NULL, $group);
  $rows = [];
  foreach ($sanity as $r) {
    $r->link_opts = unserialize($r->link_opts);
    $rows[] = sanity_table_row($r);
  }

  $page = [
    '#title' => t('Sanity Check Results'),
    '#theme' => 'page',
    '#type' => 'page',
    '#show_message' => TRUE,
  ];

  $queue = DrupalQueue::get('sanity_check_reports');
  if ($num = $queue->numberOfItems()) {
    drupal_set_message("There are currently $num sanity reports in the queue. Please refresh this page soon to see an updated report.", 'warning', FALSE);
  }
  $page['content']['report'] = [
    '#theme' => 'table',
    '#header' => [
      'Type',
      'Link',
      'Message',
    ],
    '#attributes' => [
      'class' => ['system-status-report'],
    ],
    '#rows' => $rows,
    '#sticky' => FALSE,
    '#empty' => t('Congratulations! Nothing insane is wrong with your site.'),
  ];

  return $page;
}

/**
 * Turn a sanity result object into a table row.
 */
function sanity_table_row($result) {
  if (empty($result->severity)) {
    $result->severity = WATCHDOG_WARNING;
  }

  $cells[0] = empty($result->type) ? $result->skey : $result->type;
  if (!empty($result->link_raw)) {
    $cells[1] = filter_xss($result->link_raw);
  }
  else {
    $cells[1] = !empty($result->link_text) ? l($result->link_text, $result->link_path, $result->link_opts) : '';
  }
  $cells[2] = $result->message;

  $row['class'] = [sanity_severity_class($result->severity)];
  $row['no_striping'] = TRUE;
  $row['data'] = $cells;

  return $row;
}

/**
 * Turn a watchdog severity level into a row class.
 */
function sanity_severity_class($wd = WATCHDOG_WARNING) {
  switch ($wd) {
  case WATCHDOG_INFO:
  case WATCHDOG_DEBUG:
  case WATCHDOG_NOTICE:
    return 'ok';
    break;
  case WATCHDOG_WARNING:
  case WATCHDOG_ERROR:
    return 'warning';
    break;
  case WATCHDOG_ALERT:
  case WATCHDOG_CRITICAL:
  case WATCHDOG_EMERGENCY:
    return 'error';
    break;
  }
}

// Implement on behalf of dblog.

/**
 * Implements hook_sanity() on behalf of dblog.
 */
function dblog_sanity($last_refreshed) {
  $items = [];

  $items['watchdog_alerts'] = [
    'query' => "SELECT * FROM watchdog WHERE timestamp > :ts AND severity <= :sev;",
    'params' => [
      ':ts' => max($last_refreshed, time() - 604800),
      ':sev' => WATCHDOG_ERROR,
    ],
    'fetch_cb' => 'dblog_sanity_prepare',
    'group' => 'Watchdog',
  ];

  return $items;
}

/**
 * Turn a watchdog object into a sanity object
 */
function dblog_sanity_prepare($wd) {
  $o = new stdClass();
  $o->message = theme('dblog_message', ['event' => $wd, 'link' => TRUE]);
  $o->type = "Watchdog: $wd->type";
  $o->link_raw = $wd->link;
  $o->severity = $wd->severity;

  return $o;
}


